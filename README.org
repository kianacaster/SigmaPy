* Sigma16

Sigma16 is a computer architecture designed for research and teaching
in computer systems.  This application provides a complete environment
for experimenting with the architecture, including an editor,
assembler, linker, emulator, and an integrated development environment
(IDE) with a graphical user interface.

Yeah cool basically yoinked it from the original repo https://github.com/jtod/Sigma16 and rewrote the basic functionality in python as a CLI because the site just looks a bit ucky on my *Arch Linux* setup (yes, I use arch ðŸ˜Ž) (the ðŸ˜Ž is supposed to be the sunglasses emoji but it looks like a ? to me because I'm on arch) (I use arch btw). 

Anyway... python main.py run yourassemblycode.asm.txt basically it all you need/can do for now. Will make a GUI I guess at some point may aswell.

If you for some reason need to know more:

Usage

  The Sigma16 CLI tool allows you to assemble and run Sigma16
  assembly files.

  Running the Tool


  You can execute the tool using python3 src/main.py followed by
   a command and its arguments.

  Commands

  assemble

  Assembles a Sigma16 assembly file and displays the assembly
  results, including any errors.

  Syntax:

   1 python3 src/main.py assemble <file_path>


   * <file_path>: The path to your Sigma16 assembly file (e.g.,
     hello.asm.txt).

  Example:

   1 python3 src/main.py assemble hello.asm.txt



  Output:
   * Indicates if assembly was successful or if errors occurred.
   * Lists assembly errors if any.

  run

  Assembles and then executes a Sigma16 assembly file in the
  emulator. By default, it provides a concise summary of the
  program's execution, including modified registers and accessed
   memory locations.

  Syntax:


   1 python3 src/main.py run <file_path> [options]


   * <file_path>: The path to your Sigma16 assembly file (e.g.,
     hello.asm.txt).


  Options:
   * --mem-dump: Dumps the entire memory content after execution.
   * --reg-dump: Dumps the state of all registers after
     execution.
   * --verbose: Enables verbose debug logging during emulation.
     This will show detailed internal emulator operations.

  Examples:

   1. Run with default summary output:


   1     python3 src/main.py run
     ../Examples/Core/Arithmetic/Mult.asm.txt

      Output:
       * Assembly success/failure message.
       * "Running Emulator" message.
       * Any output from trap_read or trap_write instructions in
         your assembly program.
       * "Emulator halted." or "Emulator stopped..." message.
       * "Modified Registers Summary": Lists only the registers
         whose values changed during execution, showing their
         final hexadecimal and decimal values.
       * "Accessed Memory Summary": Lists memory addresses that
         were read from or written to, showing their final
         hexadecimal values. Addresses are grouped for
         readability.


   2. Run with full memory and register dumps:

   1     python3 src/main.py run hello.asm.txt
     --mem-dump --reg-dump

      Output:
       * Same as default summary, plus:
       * A detailed dump of all registers.
       * A detailed dump of the entire memory space.

   3. Run with verbose debug logging (for development/debugging):


   1     python3 src/main.py run hello.asm.txt --verbose

      Output:
       * Includes all common.mode.devlog messages, providing
         extensive detail about each step of the emulation
         process. This output can be very long.
